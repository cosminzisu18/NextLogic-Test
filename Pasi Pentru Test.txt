Buna ziua, sunt Cosmin, iar aici voi scrie pașii pe care i-am parcurs pentru a finaliza testul.

1. Am ales ca limbaj de programare Python și am folosit Tkinter pentru a crea interfața grafică:
   - Tkinter este o bibliotecă standard în Python, care permite crearea de interfețe grafice ușor și rapid.
   - JSON este o bibliotecă standard în Python pentru manipularea datelor în format JSON.

2. Instalarea bibliotecilor:
   - Tkinter vine preinstalat cu majoritatea distribuțiilor de Python, dar poate fi instalat cu comanda `pip install tk`.
   - JSON este o bibliotecă standard și nu necesită instalare separată.

3. Crearea fișierului Python de bază (main.py):
   - Am început prin importarea bibliotecilor necesare și definirea funcțiilor utile pentru manipularea și procesarea textului și a datelor JSON.
     - `import json`: Pentru a lucra cu datele în format JSON.
     - `import re`: Pentru a utiliza expresii regulate în vederea extragerii și manipulării textului.
     - `import tkinter as tk`: Pentru a crea interfața grafică.
     - `from tkinter import filedialog`: Pentru a deschide un dialog de selectare a fișierelor.
     - `from collections import Counter, defaultdict`: Pentru a utiliza structuri de date specializate, cum ar fi numărătoarele și dicționarele implicite.

4. Prima dată am urmărit să convertesc fișierul .txt într-un JSON valid:
   4.1. Prin `value.strip()` am eliminat spațiile de la începutul și sfârșitul textului.
   4.2. Apoi am verificat dacă textul începe cu ghilimele. Dacă da, îl lăsăm cum este, dacă nu, adăugăm noi la începutul și sfârșitul textului și ne asigurăm că nu există ghilimele în interiorul acestuia, ștergându-le.
   4.3. Am folosit un regex pentru a ne asigura că toate cheile sunt între ghilimele.
   4.4. Fiind în unele cazuri după text combinații de cuvinte, litere și caractere, m-am gândit că cel mai ușor să le pun între ghilimele este să preiau tot ce este între "text" și "boundingBox".
   4.5. Am eliminat ghilimelele suplimentare.
   4.6. În funcția `validate_json`, verificăm mereu dacă apar erori, unde apar acele erori și ce erori sunt.

5. Am folosit patternuri pentru a extrage datele din datele JSON și am mers pe ideologii de colectare date, curățarea acestora eliminând date lipsă sau date irelevante, transformarea datelor, analiza lor pentru a descoperi un tipar:
   5.1. Pentru a extrage numărul cardului, am folosit formatul de xxxx xxxxx x.
   5.2. Pentru a extrage numărul, numele, inițiala și prenumele, am folosit următorii pași:
       5.2.a. Am curățat datele și am afișat inițial numai cifrele și majusculele.
       5.2.b. Am șters reziduurile de date care se aflau în dreapta.
       5.2.c. Am căutat cel mai repetitiv cuvânt și l-am considerat nume de familie.
       5.2.d. Am separat numele de familie de restul caracterelor și l-am poziționat la sfârșit.
       5.2.e. Am creat un pattern regex pentru a extrage datele într-un format specific: nr firstname initial lastname.
   5.3. Pentru a extrage data de expirare, am folosit formatul care caută textul "VALID TO", urmat de o dată în formatul "mm/yyyy".

6. Crearea și afișarea interfeței grafice:
   - Am creat o interfață grafică folosind Tkinter pentru a permite utilizatorului să încarce un fișier .txt și să vizualizeze datele extrase.
   - Am creat un buton pentru încărcarea fișierului și etichete pentru a afișa informațiile relevante.
   - Am utilizat un cadru pentru a afișa datele într-un mod structurat și estetic plăcut.

Prin acești pași, am reușit să extrag și să afișez corect datele din fișierul .txt într-un format JSON valid și să le prezint într-o interfață grafică ușor de utilizat.

Dacă sunt necesare ajustări sau completări suplimentare, vă stau la dispoziție pentru a le implementa.
